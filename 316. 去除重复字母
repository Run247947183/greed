# greed
贪心算法
class Solution {
    // 贪心算法
    // 题目要求是包含所有字母，并且要不重复，以及是最小字典序，也不能够打乱字母出现的相对顺序
    // 通过栈来储存最终的字符串
    // 判断当前字母是不是能加入栈，需要满足以下几个条件
    // （1）如果栈为空，则直接加入栈
    // （2）如果当前栈内以及有该字母，则不能加入
    // （3）如果栈顶元素大于当前字母，并且栈顶元素在后面还会出现，则将栈顶元素出栈，再将当前字母入栈
    // （4）如果当前字母没在栈中出现过，并且不满足条件 3，则直接加入栈
    // 通过 HashMap 记录每个字母最后出现的位置
    // 通过 HashSet 记录当前栈内都有哪些字母
    public String removeDuplicateLetters(String s) {
        if (s.length() == 0 || s.length() == 1) {
            return s;
        }
        HashMap<Character, Integer> map = new HashMap<>();
        Stack<Character> stack = new Stack<>();
        HashSet<Character> set = new HashSet<>();
        for (int i = 0; i < s.length(); i++) {
            map.put(s.charAt(i), i);
        }
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (!set.contains(c)) {
                while (!stack.isEmpty() && c < stack.peek() 
                && map.get(stack.peek()) > i) {
                    set.remove(stack.pop());
                }
                stack.push(c);
                set.add(c);
            }
        }
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.insert(0, stack.pop());
        }
        return sb.toString();
    }
}
